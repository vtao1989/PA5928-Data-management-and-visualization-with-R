[
["data-manipulation-with-dplyr.html", "Chapter 5 Data Manipulation with dplyr 5.1 select() 5.2 filter() 5.3 arrange() 5.4 mutate() 5.5 group_by() and summarise() 5.6 join()", " Chapter 5 Data Manipulation with dplyr In this chapter, we will learn a very popular data manipulation package dplyr. We will go through its main functions (BiomedicalDataScience 2019; r-project 2019). 5.1 select() Letâ€™s first import the package and the mtcars dataset. library(dplyr) data(mtcars) If we want to select some columns from the dataset. We could use the select() function in dplyr. It is similar with the subset() function, but here, you do not need to use select = c('mpg', 'disp'). You use the names of the columns directly in the function. df &lt;- select(mtcars, # name of the data frame mpg, disp) # column names you want to select head(df, 3) ## mpg disp ## Mazda RX4 21.0 160 ## Mazda RX4 Wag 21.0 160 ## Datsun 710 22.8 108 You could also use the index of the columns. df &lt;- select(mtcars, # name of the data frame c(1, 3)) # index of the columns you want to select head(df, 3) ## mpg disp ## Mazda RX4 21.0 160 ## Mazda RX4 Wag 21.0 160 ## Datsun 710 22.8 108 The codes above is kind of a tranditional way to do the work. We start with a function and put parameters in the function. However, this is not the typical way to use dplyr. The codes below is a more typical way people use dplyr. We start with the name of the data frame. Then, we put a speical sign %&gt;% called pipe after it. We start from a new line and write the function we want to use. Besides that, we could add more functions with the pipe operator. For example, only show first three observations with head() functions. mtcars %&gt;% # name of the data frame select(mpg, disp) %&gt;% # select the columns by their names head(3) ## mpg disp ## Mazda RX4 21.0 160 ## Mazda RX4 Wag 21.0 160 ## Datsun 710 22.8 108 We will keep using this fasion in the following lecutres. Besides choosing some columns you want, you could also exclude the column you do not want by putting a negative sign - before the variable. mtcars %&gt;% select(-mpg, -disp) %&gt;% head(3) ## cyl hp drat wt qsec vs am gear carb ## Mazda RX4 6 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 6 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 4 93 3.85 2.320 18.61 1 1 4 1 You could use : to select a range of variables. mtcars %&gt;% select(mpg:hp) %&gt;% # select from mpg to hp in the data frame head(3) ## mpg cyl disp hp ## Mazda RX4 21.0 6 160 110 ## Mazda RX4 Wag 21.0 6 160 110 ## Datsun 710 22.8 4 108 93 5.2 filter() In dplyr, we use filter() function to select the rows satisfying some conditions. mtcars %&gt;% filter(mpg &gt; 30) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## 2 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## 3 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## 4 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 Add more conditions by using , to separating them. mtcars %&gt;% filter(mpg &gt; 30, qsec &lt; 19) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## 2 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 5.3 arrange() We could use arrange the order of some columns by arrange() functions. mtcars %&gt;% arrange(mpg) %&gt;% # arrange mpg in increasing order head(10) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## 2 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## 3 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## 4 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## 5 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## 6 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## 7 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## 8 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## 9 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## 10 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 Or maybe we want mpg to be in a descending order. Just put a desc() outside the variable. mtcars %&gt;% arrange(desc(mpg)) %&gt;% head(10) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## 2 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## 3 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## 4 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## 5 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## 6 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## 7 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## 8 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## 9 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## 10 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 We could do them together. mtcars %&gt;% select(gear, mpg) %&gt;% arrange(desc(gear), mpg) %&gt;% head(10) ## gear mpg ## 1 5 15.0 ## 2 5 15.8 ## 3 5 19.7 ## 4 5 26.0 ## 5 5 30.4 ## 6 4 17.8 ## 7 4 19.2 ## 8 4 21.0 ## 9 4 21.0 ## 10 4 21.4 5.4 mutate() We use mutate() to do some calculations with the variables and create a new column to store them. mtcars %&gt;% select(mpg) %&gt;% mutate(kmpg = mpg * 1.609) %&gt;% head(10) ## mpg kmpg ## 1 21.0 33.7890 ## 2 21.0 33.7890 ## 3 22.8 36.6852 ## 4 21.4 34.4326 ## 5 18.7 30.0883 ## 6 18.1 29.1229 ## 7 14.3 23.0087 ## 8 24.4 39.2596 ## 9 22.8 36.6852 ## 10 19.2 30.8928 mtcars %&gt;% select(mpg, wt) %&gt;% mutate(kmpg = mpg * 1.609, lbwt = wt * 1000) %&gt;% head(10) ## mpg wt kmpg lbwt ## 1 21.0 2.620 33.7890 2620 ## 2 21.0 2.875 33.7890 2875 ## 3 22.8 2.320 36.6852 2320 ## 4 21.4 3.215 34.4326 3215 ## 5 18.7 3.440 30.0883 3440 ## 6 18.1 3.460 29.1229 3460 ## 7 14.3 3.570 23.0087 3570 ## 8 24.4 3.190 39.2596 3190 ## 9 22.8 3.150 36.6852 3150 ## 10 19.2 3.440 30.8928 3440 5.5 group_by() and summarise() We use group_by() to do aggregation (group the observations based the values of one or one more columns) work and summarise() to calculate some statistics related to each group. mtcars %&gt;% group_by(gear) %&gt;% summarise(mean_mpg = mean(mpg), max_mpg = max(mpg), total = n()) ## # A tibble: 3 x 4 ## gear mean_mpg max_mpg total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 3 16.1 21.5 15 ## 2 4 24.5 33.9 12 ## 3 5 21.4 30.4 5 mtcars %&gt;% group_by(gear, am) %&gt;% summarise(mean_mpg = mean(mpg), max_mpg = max(mpg), total = n()) ## # A tibble: 4 x 5 ## # Groups: gear [3] ## gear am mean_mpg max_mpg total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 3 0 16.1 21.5 15 ## 2 4 0 21.0 24.4 4 ## 3 4 1 26.3 33.9 8 ## 4 5 1 21.4 30.4 5 5.6 join() We could use join() to do the work of merge(). ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score1 &lt;- c(69.5, 77.5, 99, 90) # create variable Score1 df1 &lt;- data.frame(ID, Name, Score1) # combine the varibles into one data frame called df1 df1 ## ID Name Score1 ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 99.0 ## 4 4 D 90.0 Name &lt;- c(&#39;A&#39;, &#39;D&#39;, &#39;C&#39;) # create variable Name Score2 &lt;- c(98, 46, 55) # create variable Score2 df2 &lt;- data.frame(Name, Score2) # combine the varibles into one data frame called df2 df2 ## Name Score2 ## 1 A 98 ## 2 D 46 ## 3 C 55 df1 %&gt;% left_join(df2, by = &#39;Name&#39;) ## ID Name Score1 Score2 ## 1 1 A 69.5 98 ## 2 2 B 77.5 NA ## 3 3 C 99.0 55 ## 4 4 D 90.0 46 df1 %&gt;% right_join(df2, by = &#39;Name&#39;) ## ID Name Score1 Score2 ## 1 1 A 69.5 98 ## 2 4 D 90.0 46 ## 3 3 C 99.0 55 Could you tell the difference between left_join() and right_join()? Besides left_join() and right_join(), we have inner_join() (keep only matched observations of two data frames) and full_join() (keep all observations of two data frames). References "]
]
