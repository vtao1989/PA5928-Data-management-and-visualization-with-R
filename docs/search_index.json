[
["index.html", "PA 5928 Data management &amp; visualization with R Chapter 1 Introduction to RStudio 1.1 What is R 1.2 What is R Studio 1.3 Install R + RStudio 1.4 Familiar with the user interface of R Studio 1.5 Create and save R file 1.6 Print Hello, world 1.7 Install and use R Packages 1.8 Make notes 1.9 Tips (Updating)", " PA 5928 Data management &amp; visualization with R Tao Tao 2019-08-31 Chapter 1 Introduction to RStudio 1.1 What is R R is a type of programming language and supports many tasks including statistical computation and grapics. 1.2 What is R Studio RStudio is a programming software for editing and running R code. 1.3 Install R + RStudio For better coding and running R, you should install both R and RStudio.You could only code R with the installation with R only, however, RStudio provides you with more conveinece during the working process. In this course, we will use RStudio to do all the course stuff. So please make sure you install both two! R could be downloaded here and RStudio could be downloaded here. 1.4 Familiar with the user interface of R Studio Below is the figure showing a screenshot of the user interface of RStudio. You will find couple of panes/windows with different usages. Manu/Tool Bar Source The pane where you write and edit your code. Environment/History Environment lists all the variables that you are using. History presents the codes you have runned before. Console Console is original R interactive window. You could input codes and see the results here. Plots/Help Plots window shows the output figures. Help windows presents the information of the function or package you check. 1.5 Create and save R file Three ways to create a R file in the RStudio: 1. Manu -&gt; File -&gt; New File -&gt; R Script 2. Shortcut: Ctrl + Shift + N 3. Tool Bar -&gt; New file button Also three ways to save R file 1. Manu -&gt; File -&gt; Save 2. Shortcut: Ctrl + S 3. Tool Bar -&gt; Save file button 1.6 Print Hello, world Now, let’s try to input some codes and run them! Let’s let R print the very classic “Hello, world!” with print() function. We could run the codes in several ways: Select the codes or put the cursor in the line of your code, and click the Run button located in the right-top position of the console pane. Select the codes or put the cursor in the line of your code, and use shortcut: Ctrl + Enter You could also click the Re-run button near the Run button to re-run the codes you runned last time print(&#39;Hello, world!&#39;) ## [1] &quot;Hello, world!&quot; Because what we need to output here is a string varible, we have to put them in the quotation mark. Either single quotation or double quotation mark works well. Let’s see another example. print(5928) ## [1] 5928 Here, 5928 is an integer and we do not need to put them in the quotation mark. 1.7 Install and use R Packages R is easy to use because it has many packages with different usages. These packages could help you acomplish some complex tasks with several lines of codes. Some packages have been already been installed and you could use them directly. However, most of the packages have to be installed before you want to use them. There are couple of ways you could install a package. Let’s take the gbm package for example. 1. Manu -&gt; Tools -&gt; Install Packages... -&gt; Input the package name -&gt; Click Install button 2. Use the code below: install.packages(&quot;gbm&quot;) After the installation of the package, you have import the it with library() function before you use the functions in it. library(gbm) ## Loaded gbm 2.1.4 We will spend more time in the future classes to explore the various R packages and their different usages. 1.8 Make notes It is important to write notes for your codes. It could help others or even yourself understand your codes easily. Use hash tag to indicate the notes. For example, gbm1 &lt;- gbm(AvgMet~PkAreaH+StpNumH+DisToMin, # formula data=MetM, # dataset var.monotone=c(+1, rep(0,10),rep(0,15)), distribution=&quot;gaussian&quot;, # see the help for other choices n.trees=5000, # number of trees shrinkage=0.001, # shrinkage or learning rate, 0.001 to 0.1 usually work interaction.depth=6, # 1: additive model, 2: two-way interactions, etc. bag.fraction = 0.5, # subsampling fraction, 0.5 is probably best n.minobsinnode = 10, # minimum total weight needed in each node cv.folds = 5) R will not run the codes after hash tags in each line. Please try to write simple but necessary notes for the codes. Keep this as a good habbit and you will thank yourself in the future. 1.9 Tips (Updating) You could divide your codes into sections by interting chunks before each sections with the shortcut: Ctrl + Shift + R. This will help you organize your codes. Use ? or help() function to find the related instruction or help page, for example, if you want to find the instruction of library() function, just ?library or help(library) Both will direct you to the instruction page you are looking for. Reference Introduction to RStudio "],
["introduction-to-r.html", "Chapter 2 Introduction to R 2.1 Variable types 2.2 Operations 2.3 Data types 2.4 Conditional statements 2.5 Loops 2.6 Functions", " Chapter 2 Introduction to R 2.1 Variable types There are several variables which R could recoganise. Here, we use class() function to check the type of each value. Charactor class(&quot;Hello, world!&quot;) ## [1] &quot;character&quot; Numeric (real or decimal) class(59.28) ## [1] &quot;numeric&quot; Integer (L tells R that this number is an integer) class(2L) ## [1] &quot;integer&quot; Logical class(TRUE) ## [1] &quot;logical&quot; class(FALSE) ## [1] &quot;logical&quot; Complex (complex number, is a type of number, with respect to real number) class(1+4i) ## [1] &quot;complex&quot; It is important to know clearly what is the type of the variable you are using because different types of variables may have different methods to be dealed with. Another caveat is that the outlook of the variable may not show its real variable type. For example, a common situation is that a variable contains numbers could be charactor. class(&quot;59.28&quot;) ## [1] &quot;character&quot; Here, the number has a quotation number, which means it has been transferred to type charactor. Therefore, please be careful about this! 2.2 Operations 2.2.1 Assignment operations Left assignment a &lt;- 1 b &lt;&lt;- &quot;Hello, world!&quot; c = c(1, 3, 4) Right assignment 1 -&gt; a 2 -&gt;&gt; b 2.2.2 Arithmetic operations Add 1 + 1 ## [1] 2 Subtract 5 - 3 ## [1] 2 Multiple 3 * 5 ## [1] 15 Divide 5 - 3 ## [1] 2 Power 5 ^ 2 ## [1] 25 Mode 5 %% 2 ## [1] 1 2.2.3 Relational operations Larger 3 &gt; 4 ## [1] FALSE 5 &gt; 3 ## [1] TRUE Smaller 3 &lt; 5 ## [1] TRUE 4 &lt; 2 ## [1] FALSE Equal 4 == 4 ## [1] TRUE 5 == 4 ## [1] FALSE No less than (larger or equal to) 3 &gt;= 4 ## [1] FALSE 3 &gt;= 2 ## [1] TRUE No larger than (samller or equal to) 5 &lt;= 2 ## [1] FALSE 5 &lt;= 5 ## [1] TRUE Not equal 3 != 4 ## [1] TRUE 2.2.4 Logical operations And TRUE &amp; TRUE ## [1] TRUE FALSE &amp; TRUE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE Or TRUE | TRUE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE Not ! TRUE ## [1] FALSE ! FALSE ## [1] TRUE 2.3 Data types Vetor You could create a vetor by using c() function. a &lt;- c(5, 9, 2, 8) # create a numeric vector a # show the value of this vetor ## [1] 5 9 2 8 b &lt;- c(&#39;hello&#39;, &#39;world&#39;, &#39;!&#39;) # charactor vector b ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c &lt;- c(5, &#39;good&#39;) # if you create a vector containing mixed variable types, such as numeric and charactor, R will restrict them to be the same variable type, here, charactor c ## [1] &quot;5&quot; &quot;good&quot; You could select elements in the vetor by using varaible[#]. a[3] # select the 3rd element ## [1] 2 b[1:3] # select from the 1st to the 3rd element ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c[2] # select the 2nd element ## [1] &quot;good&quot; Matrice You could create a matrix using matrix() function. a &lt;- matrix(1:6, # the data to be put in the matrix, here we use numbers from 1 to 6 nrow = 2, # number of rows in the matrix ncol = 3, # number of columns in the matrix byrow = FALSE) # how to put the data in the matrix, FALSE means by columns, TURE means by rows. a ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 For variable selection, the intuitive way is using coordinates. a[2,3] # select the elements in the 2nd row and 3rd column ## [1] 6 You could also select the entire row or column. a[,2] # the 2nd column ## [1] 3 4 a[1,] # the 1st row ## [1] 1 3 5 Data frame Data frame is a frequently-used data type in R. It could include columns with different types of values stored in them. Let’s create a dataframe with mixed variables types using data.frame() function. ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score &lt;- c(69.5, 77.5, 81.5, 90) # create variable Score df &lt;- data.frame(ID, Name, Score) # combine the varibles into one data frame called df df ## ID Name Score ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 81.5 ## 4 4 D 90.0 We created a data frame stored the students’ ID, name, and their test scores. If we want to select elements from this data frame, there are couple of ways. df[2,3] # 2nd row and 3rd column ## [1] 77.5 df[&#39;ID&#39;] # column of variable ID ## ID ## 1 1 ## 2 2 ## 3 3 ## 4 4 df[c(&#39;ID&#39;, &#39;Score&#39;)] # column of ID and Score ## ID Score ## 1 1 69.5 ## 2 2 77.5 ## 3 3 81.5 ## 4 4 90.0 There is another way to select the column by its name. When you type $ after the data frame name, the RStudio will list all the variable names in that columns and makes it easier to choose the variable you want. It is more commonly used. df$Name # column of variable Name ## [1] A B C D ## Levels: A B C D List List could store mixed types of values. a &lt;- list(ID = 1, Name = &#39;A&#39;, Score = 69.5) a ## $ID ## [1] 1 ## ## $Name ## [1] &quot;A&quot; ## ## $Score ## [1] 69.5 Factor Factor is the nominal variable in R. This type will be very useful when we want to analyize data from different groups, such as gender. a &lt;- c(1, 2, 1, 2, 3, 3, 1, 1) class(a) ## [1] &quot;numeric&quot; afactor &lt;- factor(a) class(afactor) ## [1] &quot;factor&quot; 2.4 Conditional statements Conditional statement, also known as if statement. if (test_expression){ statement_1 } else { statement_2 } If the test_expression returns TRUE, then the codes will contitue to statement_1, if it returns FALSE, the codes will continue to statement_2. You could also omit the else part. if (test_expression){ statement_1 } If the test_expression returns FALSE, the codes will continue to next line. x &lt;- 5 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } else { print(&#39;x is not larger than 3&#39;) } ## [1] &quot;x is larger than 3&quot; x &lt;- 1 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } 2.5 Loops Loops help us repeat the codes we want. for (range){ statement } range will provide the range for a variable. for (i in 1:3){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 2.6 Functions Functions are codes have been defined with specific usage. You only need to input some necessary variables and functions will do the tasks and return the result. For example, sum() function could help you add the all the numbers in a list or dataframe and return the sum. sum(c(1, 4, 10, 5)) ## [1] 20 Another example is mean() function could help you average the numbers in a list or data frame and reture the mean value. mean(c(1, 4, 10, 5)) ## [1] 5 It is important to use the right function to do the right task. To do this, you have to be familiar with the functions you are using. It needs more practice. Reference Data types Data Types and Structures R operators "],
["data-manipulation.html", "Chapter 3 Data Manipulation 3.1 import and save data 3.2 View data 3.3 Data selection 3.4 Conditional selection 3.5 Deal with missing values 3.6 Subset 3.7 Merge two datasets 3.8 column operations", " Chapter 3 Data Manipulation 3.1 import and save data 3.1.1 import data CSV file mydata &lt;- read.csv(&#39;c:/mydata.csv&#39;, # file location and name header=TRUE, # read the first sep=&quot;,&quot;) # which type of separation EXCEL file library(readxl) dataset &lt;- read_excel(&#39;c:/mydata.xlsx&#39;, # file location and name sheet = &#39;data&#39;) # name or index of the sheet dta STATA file library(foreign) mydata &lt;- read.dta(&#39;c:/mydata.csv&#39;) # file location and name System tool Besides importing data by codes, you could also import data with the system tool. File -&gt; Import dataset -&gt; choose the type of dataset you want to import 3.1.2 save file CSV file write.csv(df, # data &#39;c:/filename.csv&#39;) # file location and name EXCEL file library(xlsx) write.xlsx(mydata, # data &quot;c:/mydata.xlsx&quot;) # file location and name dta STATA file library(foreign) write.dta(mydata, &quot;c:/mydata.dta&quot;) 3.2 View data You could view the variable names and simple discription in the Environment pane in the righttop position of RStudio. If you want to view more information, clik the variable name and view the variale in new window. Here, we use the built-in dataset mtcars as a example. By importing this dataset, use data() function. data(mtcars) You could also view the data in the new window by View() function. View(mtcars) View the first ten observations in the dataset. head(mtcars, n = 10) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 view the last five observations in the dataset. tail(mtcars, n = 5) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.9 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.5 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.5 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.6 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.6 1 1 4 2 List the variables in the dataset. names(mtcars) ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; colnames(mtcars) ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; List the structure of the dataset. str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... List the dimentions of the dataset dim(mtcars) ## [1] 32 11 List the number of rows in the dataset nrow(mtcars) ## [1] 32 List the number of columns in the dataset. ncol(mtcars) ## [1] 11 Class of an object (numeric, matrix, data frame, etc) class(mtcars) ## [1] &quot;data.frame&quot; 3.3 Data selection Select one column head(mtcars$mpg, n = 5) # by name ## [1] 21.0 21.0 22.8 21.4 18.7 head(mtcars[1], n = 5) # by index ## mpg ## Mazda RX4 21.0 ## Mazda RX4 Wag 21.0 ## Datsun 710 22.8 ## Hornet 4 Drive 21.4 ## Hornet Sportabout 18.7 Select several column head(mtcars[c(&#39;mpg&#39;, &#39;disp&#39;)], n = 5) # by name ## mpg disp ## Mazda RX4 21.0 160 ## Mazda RX4 Wag 21.0 160 ## Datsun 710 22.8 108 ## Hornet 4 Drive 21.4 258 ## Hornet Sportabout 18.7 360 head(mtcars[c(1, 3, 5)], n = 5) # by index ## mpg disp drat ## Mazda RX4 21.0 160 3.90 ## Mazda RX4 Wag 21.0 160 3.90 ## Datsun 710 22.8 108 3.85 ## Hornet 4 Drive 21.4 258 3.08 ## Hornet Sportabout 18.7 360 3.15 Select one row mtcars[1,] # by index ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 mtcars[&#39;Valiant&#39;,] # by name ## mpg cyl disp hp drat wt qsec vs am gear carb ## Valiant 18.1 6 225 105 2.76 3.46 20.22 1 0 3 1 Select several rows mtcars[2:3,] # by index ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 mtcars[c(1,5,9),] # by index ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.62 16.46 0 1 4 4 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.44 17.02 0 0 3 2 ## Merc 230 22.8 4 140.8 95 3.92 3.15 22.90 1 0 4 2 mtcars[c(&#39;Valiant&#39;, &#39;Hornet Sportabout&#39;),] # by name ## mpg cyl disp hp drat wt qsec vs am gear carb ## Valiant 18.1 6 225 105 2.76 3.46 20.22 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.02 0 0 3 2 3.4 Conditional selection mtcars[mtcars$mpg &gt; 25,] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 mtcars[(mtcars$mpg &gt; 25) &amp; (mtcars$qsec &lt; 19), ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 mtcars$mpg[mtcars$gear == 4] ## [1] 21.0 21.0 22.8 24.4 22.8 19.2 17.8 32.4 30.4 33.9 27.3 21.4 3.5 Deal with missing values In R, the missing values is presented as NA. Test the existence of missing values with is.na() function. We used an old example here. ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, NA, &#39;C&#39;, &#39;D&#39;) # create variable Name Score &lt;- c(69.5, 77.5, NA, 90) # create variable Score df &lt;- data.frame(ID, Name, Score) # combine the varibles into one data frame called df is.na(df) ## ID Name Score ## [1,] FALSE FALSE FALSE ## [2,] FALSE TRUE FALSE ## [3,] FALSE FALSE TRUE ## [4,] FALSE FALSE FALSE Assign missing values df$Score[df$Score == 90] &lt;- NA df ## ID Name Score ## 1 1 A 69.5 ## 2 2 &lt;NA&gt; 77.5 ## 3 3 C NA ## 4 4 D NA NAs will influence some functions. mean(df$Score) # get the mean value (does not ignore NA) ## [1] NA mean(df$Score, na.rm=TRUE) # (ignore NA) ## [1] 73.5 Test if the observationsin the dataset has NAs. complete.cases(df) ## [1] TRUE FALSE FALSE FALSE Find the observations with no NAs. na.omit(df) ## ID Name Score ## 1 1 A 69.5 3.6 Subset data(mtcars) newdata &lt;- subset(mtcars, mpg &gt; 30) newdata ## mpg cyl disp hp drat wt qsec vs am gear carb ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 newdata &lt;- subset(mtcars, select = c(&#39;mpg&#39;, &#39;cyl&#39;)) head(newdata, n = 5) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 3.7 Merge two datasets ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score1 &lt;- c(69.5, 77.5, 99, 90) # create variable Score1 df1 &lt;- data.frame(ID, Name, Score1) # combine the varibles into one data frame called df1 df1 ## ID Name Score1 ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 99.0 ## 4 4 D 90.0 Name &lt;- c(&#39;A&#39;, &#39;D&#39;, &#39;C&#39;) # create variable Name Score2 &lt;- c(98, 46, 55) # create variable Score2 df2 &lt;- data.frame(Name, Score2) # combine the varibles into one data frame called df2 df2 ## Name Score2 ## 1 A 98 ## 2 D 46 ## 3 C 55 merge(df1, df2, # dataframes needs to be merged by = &#39;Name&#39;, # name of the columns used for merging all.x = TRUE) # keep all observations in the first dataframe after merging ## Name ID Score1 Score2 ## 1 A 1 69.5 98 ## 2 B 2 77.5 NA ## 3 C 3 99.0 55 ## 4 D 4 90.0 46 merge(df1, df2, by = &#39;Name&#39;, all.y = TRUE) # keep all observations in the first dataframe after merging ## Name ID Score1 Score2 ## 1 A 1 69.5 98 ## 2 C 3 99.0 55 ## 3 D 4 90.0 46 3.8 column operations ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score1 &lt;- c(69.5, 77.5, 99, 90) # create variable Score1 Score2 &lt;- c(98, 46, 55, 70) # create variable Score2 df &lt;- data.frame(ID, Name, Score1, Score2) # combine the varibles into one data frame called df df ## ID Name Score1 Score2 ## 1 1 A 69.5 98 ## 2 2 B 77.5 46 ## 3 3 C 99.0 55 ## 4 4 D 90.0 70 Create a new column in the dataframe to calculate the sum of score 1 and score 2 df$totalsocre &lt;- df$Score1 + df$Score2 df ## ID Name Score1 Score2 totalsocre ## 1 1 A 69.5 98 167.5 ## 2 2 B 77.5 46 123.5 ## 3 3 C 99.0 55 154.0 ## 4 4 D 90.0 70 160.0 Create a new column in the dataframe to calculate the mean of score 1 and score 2 df$meansocre &lt;- (df$Score1 + df$Score2)/2 df ## ID Name Score1 Score2 totalsocre meansocre ## 1 1 A 69.5 98 167.5 83.75 ## 2 2 B 77.5 46 123.5 61.75 ## 3 3 C 99.0 55 154.0 77.00 ## 4 4 D 90.0 70 160.0 80.00 Reference 1.Importing Data 2.Exporting Data 3.Getting Information on a Dataset "],
["data-visualization-with-ggplot2.html", "Chapter 4 Data Visualization with ggplot2 4.1 plot with base functions 4.2 Grammer of Graphics (gg) 4.3 Data, Aesthetics, and Geometries 4.4 Scatter plot 4.5 bar plot 4.6 line plot", " Chapter 4 Data Visualization with ggplot2 4.1 plot with base functions We would focus on the base plotting functions in R first and then switch to the ggplot2 part. 4.1.1 Scater plot year &lt;- c(1998:2003) # create variable year sales &lt;- c(500, 600, 650, 700, 400, 550) # create variable sales df &lt;- data.frame(year, sales) # combine the varibles into one data frame called df plot(df) Or, you could use the variable names directly and indicate the dataset as the codes below. You will get the same result. plot(sales ~ year, data = df) 4.1.2 Line plot You could transfer the scatter plot above to a line plot by just adding a type variable to indicate that you are plotting a line. plot(df, type = &#39;l&#39;) # type indicates the line type You could also choose another type by changing the value of type, as the one below. plot(df, type = &#39;b&#39;) # type indicates the line type 4.1.3 Bar plot barplot(df$sales, names.arg = df$year) # names.org indicates the vector of names to be plotted under each bar 4.1.4 Add more elements in the plots For a reader-friendly plots, you have to add more information such as titile, labels, and legend. For the plot above, we could use the codes below to make it more informative. barplot(df$sales, names.arg = df$year, main = &#39;Bar plot of the sales for each year from 1998 to 2003&#39;, # add title for the plot xlab = &#39;Year&#39;, # add label tag for the x-axis ylab = &#39;Sales (million dollors)&#39;, # add label for the y-axis legend = &#39;Sales&#39;) # add lengend name 4.2 Grammer of Graphics (gg) We have crammar for languages. We also have grammars for graphcis. That’s where gg of ggplot2 comes from. For ggplot2, it has seven grammatical elements listed in the table below. Element Description Data The dataset being plotted. Aesthetics The scales onto which we map our data. Geometries The visual elements used for our data. Facets Plotting small multiples. Statistics Representations of our data to aid understanding. Coordinates The space on which the data will be plotted. Themes All non-dataink. Let’s take the codes below as a simple example to show how those different elements work in ggplots. From this example, we might have a general idea what is each element and how does it work. If you are still confused, don’t worry about it. We will talk about each element in details latter. library(ggplot2) data(mtcars) ggplot(mtcars, # Data aes(x = mpg, y = wt)) + # Aesthetics geom_point() + # Geometries facet_grid(. ~ gear) + # Facets stat_smooth(method = &quot;lm&quot;, se = FALSE, col = &quot;blue&quot;) + # Statistics scale_x_continuous(&#39;Miles/(US) gallon&#39;, limits = c(0, 40)) + scale_y_continuous(&#39;Weight (1000 lbs)&#39;, limits = c(0, 7)) + # Coordinates theme_bw() # Themes 4.3 Data, Aesthetics, and Geometries Generally, if you want to draw figures with ggplot2, you need at least three elements, which are data, aesthetics, and geometries. Data is the dataset we want to visualize. Aesthetic specifies the variables and related attributes. GEometry indicates the plot type and related attributes. Take the example above again. We want to visualize the varialbes of mpg and wp (aesthetic) of the dataset mtcars (data) with a scatter plot (geometry). ggplot(mtcars, # Data aes(x = mpg, y = wt)) + # Aesthetics geom_point() # Geometries We could add attributes in the aesthetic element. For example, we could use color to indicate the value of hp by adding col = hp. ggplot(mtcars, # Data aes(x = mpg, y = wt, col = hp)) + # Aesthetics geom_point() # Geometries Here, hp is a continous variable, so ggplot2 uses the darkness of the color to indicate the value. However, if we use a categorical varibable (e.g. binomial variable), ggplot2 will use different colors to show different types. ggplot(mtcars, # Data aes(x = mpg, y = wt, col = factor(am))) + # Aesthetics geom_point() # Geometries Here, am stands for the types of transmission system (0 = automatic, 1 = manual). We use factor() to transfer this variable to a categorical one. Then, the ggplot2 uses one color for automatic transmission and another color for mannual transmission. Besides color, there are other parameters to show different aspects of the plots. Parameter Description Continuous variable Categorical variable x X axis position ✓ y y axis position ✓ size Diameter of points, thickness of lines ✓ alpha Transparency ✓ ✓ color Color of dots, outlines of other shapes ✓ ✓ fill Fill colour ✓ ✓ labels Text on a plot or axes ✓ shape Shape of point ✓ linetype Line dash pa!ern ✓ As for geometries, there are many different types ot them you can use for different plots. For examples, geom_point() for scatter plot, geom_bar for bar plot, geom_histogram for histogram, geom_boxplot for boxplot, etc. Most functions of geometries are self-explained, so you could tell what their usages easily. We all talk about those commonly used geometries such as sactter plot, bar plot, line plot, etc. in the following parts. 4.4 Scatter plot ggplot(mtcars, # Data aes(x = mpg, y = wt, alpha = hp)) + # Aesthetics geom_point() # Geometries 4.5 bar plot ggplot(mtcars, # Data aes(am)) + # Aesthetics geom_bar() # Geometries 4.6 line plot data(economics) ggplot(economics, aes(x = date, y = unemploy)) + geom_line() Reference 1.Datacamp.com Data Visualization with ggplot2 "],
["statistics-in-r.html", "Chapter 5 Statistics in R 5.1 simple statistics 5.2 Simple Linear regression 5.3 Multiple Regression 5.4 Logistic regression", " Chapter 5 Statistics in R 5.1 simple statistics 5.1.1 Mean and median We could use the base functions to do some simple statistical analysis directly. a &lt;- c(10, 20, 30, 50, 33, 29, 10, 30, 100, 0, 4.5) mean(a) # mean ## [1] 28.77273 median(a) # median ## [1] 29 5.1.2 Minimum and maximum value min(a) # minimum value ## [1] 0 max(a) # maximum value ## [1] 100 5.1.3 Quantiles x &lt;- quantile(a) x # list of quantiles ## 0% 25% 50% 75% 100% ## 0.0 10.0 29.0 31.5 100.0 x[2] # select the value by its index ## 25% ## 10 5.2 Simple Linear regression Our example is the dataset mtcars, and we want to explore the relationship between mpg (Miles/(US) gallon) and wt (Weight (1000 lbs)). data(mtcars) library(ggplot2) ggplot(mtcars, aes(mpg, wt)) + geom_point() It seems there is a linear relationship between these two variables. We then add a linear line to fit them. ggplot(mtcars, aes(mpg, wt)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = F) We then use the lm() function to fit this linear relationship and use summary() function to see the result. lm_fit &lt;- lm(wt ~ mpg, # formula mtcars) # dataset summary(lm_fit) # check result ## ## Call: ## lm(formula = wt ~ mpg, data = mtcars) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.6516 -0.3490 -0.1381 0.3190 1.3684 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.04726 0.30869 19.590 &lt; 2e-16 *** ## mpg -0.14086 0.01474 -9.559 1.29e-10 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4945 on 30 degrees of freedom ## Multiple R-squared: 0.7528, Adjusted R-squared: 0.7446 ## F-statistic: 91.38 on 1 and 30 DF, p-value: 1.294e-10 summary(lm_fit)$r.squared # value of R2 ## [1] 0.7528328 coefficients(lm_fit) # only check the coefficient ## (Intercept) mpg ## 6.047255 -0.140862 5.3 Multiple Regression Most of the time, we need to examine the relationship between one dependent variable with several independent variables. Then we have carry out multiple regression. Here, multiple indicates more than one independent variables. mlm_fit &lt;- lm(mpg~disp+hp+wt, mtcars) summary(mlm_fit) ## ## Call: ## lm(formula = mpg ~ disp + hp + wt, data = mtcars) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.891 -1.640 -0.172 1.061 5.861 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.105505 2.110815 17.579 &lt; 2e-16 *** ## disp -0.000937 0.010350 -0.091 0.92851 ## hp -0.031157 0.011436 -2.724 0.01097 * ## wt -3.800891 1.066191 -3.565 0.00133 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.639 on 28 degrees of freedom ## Multiple R-squared: 0.8268, Adjusted R-squared: 0.8083 ## F-statistic: 44.57 on 3 and 28 DF, p-value: 8.65e-11 summary(mlm_fit)$r.squared ## [1] 0.8268361 5.4 Logistic regression The above two examples both use continuous variables as their dependent variables. How about using a binomial variable a dependent variable? Then we need to do logistic regression. There are many functions to do this. Here, we introduced the glm() function. logit_reg &lt;- glm(formula = am ~ cyl + hp + wt, mtcars, family = binomial) summary(logit_reg) ## ## Call: ## glm(formula = am ~ cyl + hp + wt, family = binomial, data = mtcars) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.17272 -0.14907 -0.01464 0.14116 1.27641 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 19.70288 8.11637 2.428 0.0152 * ## cyl 0.48760 1.07162 0.455 0.6491 ## hp 0.03259 0.01886 1.728 0.0840 . ## wt -9.14947 4.15332 -2.203 0.0276 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 43.2297 on 31 degrees of freedom ## Residual deviance: 9.8415 on 28 degrees of freedom ## AIC: 17.841 ## ## Number of Fisher Scoring iterations: 8 Reference R - Mean, Median and Mode "],
["spatial-visualization.html", "Chapter 6 Spatial Visualization 6.1 Basics of spatial data 6.2 Basic plotting", " Chapter 6 Spatial Visualization 6.1 Basics of spatial data 6.2 Basic plotting Reference "]
]
