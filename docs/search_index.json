[
["index.html", "PA 5928 Data Management &amp; Visualization with R (Updating) Chapter 1 Course Syllabus 1.1 Course Description 1.2 Course Prerequisites 1.3 Logistics 1.4 Course Learning Outcomes 1.5 In-class exercise and final project 1.6 Course Schedule (Tentative) 1.7 Homework and projects collaboration and submission policy 1.8 Some results from the online survey", " PA 5928 Data Management &amp; Visualization with R (Updating) Tao Tao (University of Minnesota) 2019-10-14 Chapter 1 Course Syllabus 1.1 Course Description Introduction to RStudio software. Use of RStudio to carry out R file and related dataset management functions. Tools and techniques for data analysis and statistical programming in quantitative research or related applied areas. Topics include data selection, data manipulation, and data visualization (including charts, plots, histograms, maps, and other graphs). 1.2 Course Prerequisites Introductory statistics (regression is not necessary); ability to create bar graphs, line graphs, and scatter plots in MS Excel; and familiarity with principles of data visualization. 1.3 Logistics Instructor: Tao Tao, taotao@umn.edu Location: HHH 85 Time: Starting 10/8: Tuesdays 9:45AM to 11:00AM Office hours: Tuesday from 2:00 pm to 4:00 pm at HHH 271 Canvas: All course notes will be posted in this course website, but links will be provided on Canvas. Canvas will also be used to submit your in-class exercises, final project, and grades. So you only need to pay attention to Canvas to check everything! 1.4 Course Learning Outcomes At the end of this course, students will be able to: Use RStudio to carry out R file and related dataset management Use R to work with different types of datasets and conduct basic data management Use R to visualize data with different types of plots 1.5 In-class exercise and final project An in-class exercise will be assigned during each class for the students to practice what they have learned. ChimeIn will be used in class to check the class performance in a anonymous way. The in-class exercises will be mostly finished during the class time, and students are still required to submit their codes on the same day with necessary notes to indicate their ideas. Students will use the knowledge from this course to complete a final project (data analysis for a interested research question and write a short report about it). Grading policy In-class exercise codes: 60% Final project: 40% 1.6 Course Schedule (Tentative) # Date Topic Notes 1 10/8 Introduction to RStudio Uploaded 2 10/15 Introduction to R Uploaded 3 10/22 Data manipulation with dplyr (I) 4 10/29 Data manipulation with dplyr (II) 5 11/5 Data visualization with ggplot2 (I) 6 11/12 Data visualization with ggplot2 (II) 7 11/19 R Statistics (I) 8 11/26 R Statistics (II) 9 12/3 Spatial visualization (I) 10 12/10 Spatial visualization (II) 1.7 Homework and projects collaboration and submission policy Students can discuss their works with other students, but must code and write up notes by themselves. Plagiarism is not allowed by the university policies. Please do be careful about this. In-class exercises and projects should be submitted through Canvas. If you cannot attend the class, please write a email to the instuctor including a valid reason before the class. Then you can make up the in-class exercise in the following one week after the class. When you communicate the instructor with emails, please include PA 5928 at the beginning of your title. 1.8 Some results from the online survey 1.8.1 Question 1 1.8.2 Question 2 1.8.3 Question 3 "],
["introduction-to-rstudio.html", "Chapter 2 Introduction to RStudio 2.1 What is R 2.2 What is RStudio 2.3 Install R + RStudio 2.4 Familiar with the user interface of RStudio 2.5 Create and save R file 2.6 Print Hello, world 2.7 Install and use R Packages 2.8 Make notes 2.9 Tips", " Chapter 2 Introduction to RStudio In this chapter, we will go through some basic operations of RStudio. 2.1 What is R R is a type of programming language and supports many tasks including statistical computation (data cleaning, data management, statistics, machine learning) and graphics (static plots and interactive plots). You can also use it to create website (like this course website), write papers, analyze texts, etc. The most important thing is that R is free and easy to use, that’s why it has been applied in many fileds. 2.2 What is RStudio RStudio is a programming software for editing and running R code. It has many great features to make R programming easier! 2.3 Install R + RStudio For better coding and running R, you should install both R and RStudio. You could code R with the installation of R only, however, RStudio provides you with more conveinece in coding. In this course, we will use RStudio to do all the course lectures and exercises. So please make sure you install both of them! R could be downloaded here and RStudio could be downloaded here. Both Windows OS (Operating System) and Mac OS are supported, so please choose the right one you need for your own system. (If you have any questions about the installation of R or RStudio, please come to me in the office hours or ask IT for help) Or you could use the computers in the lab when there is no lecture. 2.4 Familiar with the user interface of RStudio Below is a screenshot of the user interface of RStudio. You will find couple of panes/windows with different usages.(Selvam 2019) Menu/Tool Bar Source The pane where you write and edit your codes. Environment/History Environment lists all the variables that you are currently using. History presents the codes you have runned before. Console Console is the original R interactive window. You could run codes and see the results here. Plot/Help Plot window shows the output figures. Help window presents the information of the function or package you are checking. 2.5 Create and save R file Three ways to create a R file in the RStudio: 1. Menu -&gt; File -&gt; New File -&gt; R Script 2. Shortcut: Ctrl + Shift + N 3. Tool Bar -&gt; New file button Also three ways to save R file 1. Menu -&gt; File -&gt; Save 2. Shortcut: Ctrl + S 3. Tool Bar -&gt; Save file button 2.6 Print Hello, world Now, let’s try to code something and run them! Let’s print the very classic “Hello, world!” with print() function. We could run the codes in several ways: Select the codes or put the cursor in the line of your code, and click the Run button located in the right-top position of the source pane. Select the codes or put the cursor in the line of your code, and use shortcut: Ctrl + Enter You could also click the Re-run button near the Run button to re-run the codes you ran last time. print(&#39;Hello, world!&#39;) ## [1] &quot;Hello, world!&quot; Because what we need to output here is a string varible, we have to put them in the quotation mark. Either single quotation or double quotation mark works well. Let’s see another example. print(5928) ## [1] 5928 Here, 5928 is an integer and we do not need to put them in the quotation marks. 2.7 Install and use R Packages R is easy to use because it has many packages with different usages. These packages could help you accomplish some complex tasks with just several lines of codes. Some packages have been already been installed and you could use them directly, which are base packages. However, most of the packages have to be installed before you use them. There are couple of ways you could install a package. Let’s take the gbm package for example. 1. Manu -&gt; Tools -&gt; Install Packages... -&gt; Input the package name -&gt; Click Install button 2. Use the code below: install.packages(&quot;gbm&quot;) After the installation of the package, you have import it with library() function before you use the related functions. library(gbm) ## Loaded gbm 2.1.5 We will spend more time in future classes to explore the various R packages and their different usages. 2.8 Make notes It is important to write notes for your codes. It could help others or even yourself understand your codes easily. Use hash tag to indicate the notes. For example, gbm1 &lt;- gbm(AvgMet~PkAreaH+StpNumH+DisToMin, # formula data=MetM, # dataset var.monotone=c(+1, rep(0,10),rep(0,15)), distribution=&quot;gaussian&quot;, # see the help for other choices n.trees=5000, # number of trees shrinkage=0.001, # shrinkage or learning rate, 0.001 to 0.1 usually work interaction.depth=6, # 1: additive model, 2: two-way interactions, etc. bag.fraction = 0.5, # subsampling fraction, 0.5 is probably best n.minobsinnode = 10, # minimum total weight needed in each node cv.folds = 5) R will not run the codes after hash tags in each line. Please try to write simple but necessary notes for the codes. Keep this as a good habbit and you will thank yourself in the future. 2.9 Tips You could divide your codes into sections by enterting chunks before each sections with the shortcut: Ctrl + Shift + R. This will help you organize your codes. Use ? or help() function to find the related instruction or help page, for example, if you want to find the instruction of library() function, just code ?library or help(library) Both will direct you to the instruction page you are looking for in the help window. References "],
["introduction-to-r.html", "Chapter 3 Introduction to R 3.1 Variable types 3.2 Operations 3.3 Data structures 3.4 Conditional statements 3.5 Loops 3.6 Functions", " Chapter 3 Introduction to R A variable is used to store data including value, vector, data frame, etc, which R could use to manipulate (tutorialspoint 2019b). This chapter introduces variable types, operations between variables, data structures, conditional statements, loops, and functions. Before we start, let’s first see how to name a variable. The valid variable name could be constructed with letters, numbers, the dot character (.), and underline character (_). Besides that, a valid variable name should start with a letter or the dot charater not followed by a number. Examples Validity Discussion var.name ✓ var_name ✓ _var_name ☓ Cannot start with the underline .var_name ✓ var%name ☓ Cannot contain % .2var_name ☓ Cannot use the dot followed by a number to start with a variable name 2var_name ☓ Cannot start with a number 3.1 Variable types There are several types of variables which R could recognise, including character, numeric, integer, logical, and complex (Blischak et al. 2019). The type of one variable is decided by the type of value it stores. We can use class() function to check the type of each variable. Character (also known as strings) v &lt;- &quot;Hello, world!&quot; class(v) ## [1] &quot;character&quot; Numeric (real or decimal number/integer) v &lt;- 59.28 class(v) ## [1] &quot;numeric&quot; Integer (L tells R that this number is an integer) v &lt;- 2L class(v) ## [1] &quot;integer&quot; v &lt;-2 class(v) ## [1] &quot;numeric&quot; Logical (Usually True or false) v &lt;- TRUE class(v) ## [1] &quot;logical&quot; v &lt;- FALSE class(v) ## [1] &quot;logical&quot; Complex (complex number is another type of number, different with real number) v &lt;- 1 + 4i class(v) ## [1] &quot;complex&quot; It is important to know clearly what is the type of the variable you are using since different types of variables may have different methods to deal with. Another caveat is that the outlook of the variable may not show its real variable type. For example, a common situation is that a variable contains numbers could be characters. v &lt;- &quot;59.28&quot; class(v) ## [1] &quot;character&quot; Here, the number has quotation marks outside, which means it has been transferred to type character. Therefore, please be careful about this! 3.2 Operations An operation tells R the mathematical or logical munipulations (tutorialspoint 2019a). 3.2.1 Assignment operations Assignment operators assign values to variables. Left assignment a &lt;- 1 b &lt;&lt;- &quot;Hello, world!&quot; c = c(1, 3, 4) Right assignment 1 -&gt; a 2 -&gt;&gt; b 3.2.2 Arithmetic operations Add 1 + 1 ## [1] 2 Subtract 5 - 3 ## [1] 2 Multiple 3 * 5 ## [1] 15 Divide 5 - 3 ## [1] 2 Power 5 ^ 2 ## [1] 25 5 ** 2 # you can also do like this ## [1] 25 Mode (find the remainder) 5 %% 2 ## [1] 1 3.2.3 Relational operations The relational operators compare the two elements and return a logical value (TRUE or FALSE) Larger 3 &gt; 4 ## [1] FALSE 5 &gt; 3 ## [1] TRUE Smaller 3 &lt; 5 ## [1] TRUE 4 &lt; 2 ## [1] FALSE Equal 4 == 4 ## [1] TRUE 5 == 4 ## [1] FALSE No less than (larger or equal to) 3 &gt;= 4 ## [1] FALSE 3 &gt;= 2 ## [1] TRUE No larger than (samller or equal to) 5 &lt;= 2 ## [1] FALSE 5 &lt;= 5 ## [1] TRUE Not equal 3 != 4 ## [1] TRUE 3 != 3 ## [1] FALSE 3.2.4 Logical operations Logical operators are operations only for logical, numeric, or complex types. Most of the time, we apply them on logical values or variables. For numeric variables, 0 is considered FALSE and non-zero numbers are taken as TRUE (DataMentor 2019). You could use T for TRUE or F for FALSE as abbreviation. Logical And TRUE &amp; TRUE ## [1] TRUE FALSE &amp; TRUE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE Logical Or TRUE | TRUE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE Logical Not ! TRUE ## [1] FALSE ! FALSE ## [1] TRUE 3.3 Data structures Variables and values could construct different data structures including vector, matrix, data frame, list, and factor (Kabacoff 2019). Vetor You could create a vetor with c() function. a &lt;- c(5, 9, 2, 8) # create a numeric vector a # show the value of this vetor ## [1] 5 9 2 8 b &lt;- c(&#39;hello&#39;, &#39;world&#39;, &#39;!&#39;) # character vector b ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c &lt;- c(5, &#39;good&#39;) # if you create a vector containing mixed variable types, such as numeric and character, R will restrict them to be the same variable type, here, character c ## [1] &quot;5&quot; &quot;good&quot; You could select elements in the vetor by using var_name[#]. Please pay attention on how R indexes its elements in the data structure. a[3] # select the 3rd element ## [1] 2 b[1:3] # select from the 1st to the 3rd element ## [1] &quot;hello&quot; &quot;world&quot; &quot;!&quot; c[1] # select the 2nd element ## [1] &quot;5&quot; 1:3 means from 1 to 3, so it actually stands for three numbers here, which are 1, 2, 3. Matrix You could create a matrix using matrix() function. a &lt;- matrix(1:6, # the data to be put in the matrix, here we use numbers from 1 to 6 nrow = 2, # number of rows in the matrix ncol = 3, # number of columns in the matrix byrow = FALSE) # how to put the data in the matrix, FALSE means by columns, TURE means by rows. a ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 For variable selection, the intuitive way is using coordinates. a[2,3] # select the elements in the 2nd row and 3rd column ## [1] 6 You could also select the entire row or column. a[ ,2] # the 2nd column ## [1] 3 4 a[1, ] # the 1st row ## [1] 1 3 5 Data frame Data frame is a frequently-used data type in R. It could include columns with different types of values stored in them. Let’s create a dataframe with mixed variables types using data.frame() function. ID &lt;- c(1:4) # create variable ID Name &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;) # create variable Name Score &lt;- c(69.5, 77.5, 81.5, 90) # create variable Score df &lt;- data.frame(ID, Name, Score) # combine the varibles into one data frame called df df ## ID Name Score ## 1 1 A 69.5 ## 2 2 B 77.5 ## 3 3 C 81.5 ## 4 4 D 90.0 We created a data frame stored the students’ ID, name, and their test scores. If we want to select elements from this data frame, there are couple of ways. df[2,3] # 2nd row and 3rd column ## [1] 77.5 df[&#39;ID&#39;] # column of variable ID ## ID ## 1 1 ## 2 2 ## 3 3 ## 4 4 df[c(&#39;ID&#39;, &#39;Score&#39;)] # column of ID and Score ## ID Score ## 1 1 69.5 ## 2 2 77.5 ## 3 3 81.5 ## 4 4 90.0 There is another way to select the column by its name. When you type $ after the name of the data frame, RStudio will list all the variable names in that data frame which makes it easier to choose the variable you want. It is more commonly used. df$Name # column of variable Name ## [1] A B C D ## Levels: A B C D List A list could store mixed types of values, which is different from vetor. a &lt;- list(ID = c(1, 2), Name = c(&#39;A&#39;, &#39;B&#39;), Score = c(69.5, 89)) When you want to select elements from a list, you could do it in a similar way as a vector. However, list does not define row or column, so you cannot use 2-D coordinates to select elements like a data frame. a[1] ## $ID ## [1] 1 2 a[2:3] ## $Name ## [1] &quot;A&quot; &quot;B&quot; ## ## $Score ## [1] 69.5 89.0 Someone might be confusing since list looks silimar to data frame. Here is a good discussion about it. Due to the time limitation, we will not cover this discussion in class. The main idea is that list is more flexible than data frame, while data frame has more restrictions. However, since data frame is more similar to 2-D table structure which is more frequently used in our daily work. We apply data frame more than list. Factor Factor is the nominal variable in R. This type will be very useful when we want to analyze data from different groups, such as gender, school, etc. a &lt;- c(1, 2, 1, 2, 3, 3, 1, 1) class(a) ## [1] &quot;numeric&quot; afactor &lt;- factor(a) class(afactor) ## [1] &quot;factor&quot; 3.4 Conditional statements if (test_expression){ statement_1 } else { statement_2 } If the test_expression returns TRUE, then the codes will go to statement_1, if it returns FALSE, the codes will go to statement_2. You could also omit the else part. if (test_expression){ statement_1 } If the test_expression returns FALSE, the codes will continue to next line. x &lt;- 5 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } else { print(&#39;x is not larger than 3&#39;) } ## [1] &quot;x is larger than 3&quot; x &lt;- 1 if (x &gt; 3){ print(&#39;x is larger than 3&#39;) } Some other conditional statements include switch, which, etc. 3.5 Loops Loops help us repeat the codes we want to run in more than one times. for loop is the intuitive and commonly-used one. for (range){ statement } range will provide the range for a variable. for (i in 1:3){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 3.6 Functions Functions are codes have been defined with specific usage. You only need to input some necessary variables and functions will do the tasks and return the result. For example, sum() function could help you add the all the numbers in a vector or dataframe and return the sum. sum(c(1, 4, 10, 5)) ## [1] 20 Another example is mean() function could help you average the numbers in a vector or data frame and return the mean value. mean(c(1, 4, 10, 5)) ## [1] 5 It is important to use the right function to do the right task. To do this, you have to be familiar with the functions you are using. It needs more practice. References "],
["miscellaneous.html", "Chapter 4 Miscellaneous 4.1 Something related to in-class exercises and grading rubic 4.2 Comparison between R and Stata", " Chapter 4 Miscellaneous 4.1 Something related to in-class exercises and grading rubic Please do remember to submit your codes! Downlowd the codes from Canvas and then start to do the exercises following the introduction in the codes. You do not need to write too-detailed notes, the focus is still coding. Do not write the codes related to the lecture in the exercise, which could help my grading easier. Make sure your codes satisfying the requirements of the exercise. In-class exercise grading rubic (Tentative) Item Grades Codes could generate the results required by the problems 6 Necessary notes to indicate the general idea (usage, function, purpose, or machanism) 3 Codes and notes are neat and well-organized 1 4.2 Comparison between R and Stata As some students asked in class, Why the school still teaches students Stata when no one uses them? I covered several points in class simply which I think is not enough. I think this question is more related to the comparison between R and Stata. I read several articles (Thompson 2019; Bailey 2019) online and list some key points in the table below. I hope this will give a better understanding of both R and Stata. Advantages of R (More Flexible but less Formal) Free and Open source More advanced technique packages Deal with more than one datasets (big data) at the same time Deal with not only data analysis tasks Advantages of Stata (More Formal but less flexible) Has many more algorithms, packages, and implementations of econometircs Faster It is supported by Statacorp so the the result is reliable It presents results in a clear format Syntax is simple and standard for most data analysis Help document is formal Besides those advantages, they have a lot of overlaps with each other. People cannot say one is absolutely better than the other. People choose them based on their task requirements. Sometimes, people install both of them in their computers (e.g. my laptop has both of them). References "],
["references.html", "Chapter 5 References", " Chapter 5 References "]
]
